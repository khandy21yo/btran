#line 2 "/home/kevin/btran/src2/lex.cc"

#line 4 "/home/kevin/btran/src2/lex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 81
#define YY_END_OF_BUFFER 82
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[229] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,   82,   81,
        3,    1,   81,   81,   23,   81,   81,   81,   13,   14,
       15,   18,   22,   19,   81,   16,   73,   20,   21,   26,
       25,   27,   75,   75,   75,   75,   75,   75,   29,   17,
       30,   24,   65,    1,   81,   81,   81,   81,    1,   81,
       77,   79,    1,   81,   77,   80,    3,    0,    8,    6,
        0,    0,    4,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,    2,    0,    5,   31,   71,   74,
       71,   73,    0,   12,   36,   33,   37,   28,   35,   32,
       34,    0,   75,   75,    0,    0,   75,   75,   75,   75,

       75,   65,    0,   68,    0,    0,   69,    0,   11,    0,
        2,   77,   77,   79,    0,   78,    2,    7,    4,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   56,   76,
       76,   76,   76,   76,   76,   76,   76,   76,    5,    0,
       71,    0,   72,   70,   75,   75,   75,   75,    9,    0,
       10,   76,   47,   76,   76,   59,   76,   76,   76,   55,
       76,   76,   76,   76,   76,   76,   76,   76,   76,    0,
       71,   75,   75,   60,    0,   75,   75,    0,   76,   76,
       58,    0,   76,   46,   76,   76,   76,   63,   76,   76,
       48,   76,   76,   57,   76,   44,   43,   42,    0,   38,

       75,   67,   53,   61,    0,    0,   51,   76,   76,   76,
       76,   54,   50,   49,   38,   40,   39,   76,   76,   76,
       64,   75,   45,   52,   62,   75,   41,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    4,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    6,    7,    8,    9,   10,   11,   12,   13,   14,
       15,   16,   17,   18,   19,   20,   21,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   23,   24,   25,
       26,   27,    1,    1,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   37,   38,   39,   40,   41,   42,
       43,   44,   45,   46,   47,   48,   43,   49,   50,   51,
       52,   53,   54,   55,   56,    1,   57,   58,   59,   60,

       61,   62,   63,   64,   65,   37,   37,   66,   67,   68,
       69,   70,   43,   71,   72,   73,   74,   75,   43,   49,
       76,   77,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[78] =
    {   0,
        1,    2,    2,    1,    2,    1,    2,    3,    1,    4,
        4,    1,    3,    1,    1,    1,    1,    2,    1,    4,
        1,    4,    5,    1,    1,    1,    1,    4,    6,    6,
        6,    4,    6,    6,    6,    4,    4,    6,    4,    4,
        4,    6,    6,    4,    6,    6,    4,    4,    6,    4,
        4,    1,    1,    1,    1,    7,    4,    6,    6,    6,
        4,    6,    6,    6,    4,    6,    4,    4,    4,    6,
        4,    6,    6,    4,    4,    4,    4
    } ;

static const flex_int16_t yy_base[246] =
    {   0,
        0,    0,   76,   88,   94,   99,  110,  127,  661,  796,
       79,  796,  134,  651,  796,  156,  101,  644,  796,  796,
      640,  796,  796,  796,  633,  796,  148,  627,  796,   81,
       94,   84,  139,  226,  227,  235,  140,  234,  796,  796,
      796,  796,  152,  796,  638,   62,  632,  152,  796,  157,
      638,  165,  634,  629,  169,  796,  172,  249,  796,  796,
      256,  624,    0,  225,  616,  233,  240,  254,  256,  258,
      230,  277,  268,  146,  796,  612,    0,  796,  250,  796,
      254,  309,   64,  796,  796,  796,  796,  796,  796,  796,
      796,  615,  319,  796,  605,    0,  336,  342,  343,  349,

      360,  307,  609,  796,  105,  603,  796,  333,  796,  372,
      796,  606,    0,  333,  602,  796,  597,  796,  796,  590,
      796,  259,  327,  311,  322,  332,  350,  353,  587,  366,
      335,  368,  382,  367,  387,  389,  375,  391,  796,  399,
      373,  574,  565,  796,  434,  438,  452,  459,  460,  369,
      796,  432,  509,  405,  448,  483,  417,  413,  458,  500,
      463,  467,  468,  480,  476,  475,  481,  482,  487,  488,
      484,  491,  495,  510,  524,  533,  544,  372,  486,  518,
      421,  536,  100,  420,  489,  517,  520,  411,  538,  525,
      395,  547,  540,  306,  550,  560,  796,  796,  240,  561,

      591,  796,  301,  296,  529,  543,  281,  569,  564,  570,
      575,  201,  166,  133,  796,  611,  796,  577,  379,  581,
      132,  620,  131,  116,  115,  628,  641,  796,  697,  704,
      711,  718,  725,  732,  737,  744,  751,  758,  765,  771,
      119,  775,   87,  782,  789
    } ;

static const flex_int16_t yy_def[246] =
    {   0,
      228,    1,  229,  229,  230,  230,  231,  231,  228,  228,
      228,  228,  232,  233,  228,  228,  228,  234,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  235,  235,  235,  235,  235,  235,  228,  228,
      228,  228,  228,  228,  236,  228,  237,  238,  228,  238,
      239,  228,  239,  240,  239,  228,  228,  232,  228,  228,
      232,  233,  241,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  228,  234,  243,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  233,  235,  228,  234,  244,  235,  235,  235,  235,

      235,  228,  236,  228,  228,  237,  228,  238,  228,  238,
      228,  239,  245,  228,  240,  228,  239,  228,  228,  242,
      228,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  228,  228,
      228,  228,  228,  228,  235,  235,  235,  235,  235,  228,
      228,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  228,
      228,  235,  228,  235,  228,  235,  235,  228,  242,  242,
      242,  228,  228,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  235,  228,  228,  228,  235,

      235,  228,  242,  242,  228,  228,  242,  242,  242,  242,
      242,  242,  242,  242,  228,  235,  228,  242,  242,  242,
      242,  235,  242,  242,  242,  235,  235,    0,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228
    } ;

static const flex_int16_t yy_nxt[874] =
    {   0,
       10,   11,   12,   12,   10,   11,   13,   14,   15,   10,
       16,   17,   18,   19,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   30,   31,   32,   33,   33,   34,
       35,   36,   37,   37,   37,   37,   37,   37,   37,   37,
       33,   37,   37,   38,   37,   37,   37,   37,   33,   37,
       37,   39,   40,   41,   42,   10,   33,   33,   34,   35,
       36,   37,   37,   37,   37,   37,   37,   37,   33,   37,
       38,   37,   37,   37,   37,   37,   37,   43,   44,   44,
       57,   43,  142,   45,   57,  143,   46,   17,   47,   43,
       44,   44,  139,   43,  105,   45,   49,   49,   46,   17,

       47,   49,   49,   75,   75,   50,   85,   86,   90,   91,
       50,   52,   12,   53,   10,   52,   10,   54,   87,   88,
       89,   55,   10,  105,  119,  121,  121,   56,   52,   12,
       53,   10,   52,   10,   54,  206,   59,   59,   55,   10,
       60,  121,  121,  121,   56,   61,   92,  228,  150,   94,
       94,   95,  228,  102,  109,  109,  121,  102,   80,  111,
      111,   96,   96,  110,  206,   10,  114,   81,  110,   82,
      114,   75,  117,   57,  113,  150,  121,   57,   83,   83,
      137,  138,   10,   64,   65,   66,   65,   67,   68,   65,
       65,   69,   65,   70,   65,   71,   65,   72,   65,   65,

       73,   74,   65,   65,   65,   65,   65,   83,   83,  137,
      138,  121,   64,   65,   66,   65,   67,   68,   65,   65,
       69,   70,   65,   71,   65,   72,   65,   73,   74,   65,
       65,   65,   65,  228,   92,  121,   94,   94,  228,   95,
      121,  228,  228,  121,   94,   94,  228,  228,   96,   96,
      121,   59,   59,  122,   98,   60,   96,   96,  118,  118,
       61,  100,   60,  123,  121,  101,  121,   61,  121,  121,
      133,   79,  215,   97,   99,  141,  124,  125,  121,  126,
      140,  140,  122,   98,  140,  140,  128,  121,  129,  131,
      100,  121,  123,  132,  101,  130,  136,  127,  133,  152,

       97,  215,   99,  124,  134,  125,  121,  126,  102,  140,
      140,  121,  102,  140,  140,  128,  121,  129,  131,   80,
      135,  121,  132,  130,  127,  136,  228,  152,   81,   94,
       82,  228,  121,  134,  114,  109,  109,  121,  114,   83,
       83,   96,  121,  228,  110,  121,   94,  135,  228,  228,
      228,  154,   94,   94,  228,  228,  228,  153,   96,   94,
      121,  228,  156,  121,   96,   96,  155,  228,   83,   83,
       94,   96,  228,  147,  151,  151,  121,  121,  121,  154,
      160,  145,   96,  110,  158,  121,  153,  146,  148,  121,
      157,  156,  121,  155,  141,  159,  161,  121,  149,  121,

      165,  121,  147,  140,  140,  121,  168,  160,  145,  178,
      202,  163,  162,  158,  146,  121,  148,  170,  157,  164,
      171,  121,  166,  121,  159,  161,  149,  121,  224,  165,
      121,  121,  140,  140,  167,  168,  169,  178,  202,  162,
      163,  228,  121,  172,  173,  228,  228,  164,   94,  180,
      228,  166,  185,  175,  224,  184,   96,  175,  121,  228,
       96,  167,   94,  169,  228,  174,  228,  228,  121,   94,
       94,  228,  228,  121,   96,  179,  180,  121,  121,  181,
      185,   96,   96,  184,  182,  121,  121,  176,  182,  177,
      121,  121,  121,  183,  174,  186,  121,  121,  228,  121,

      196,  197,  179,  228,  198,  171,  187,  191,  181,  171,
      121,  189,  188,   96,  192,  190,  176,  228,  177,  121,
       94,  194,  228,  186,  195,  175,  193,  121,  121,  175,
      121,  203,   96,  187,  207,  121,  191,  182,  189,  188,
      228,  182,  192,   94,  190,  228,  205,  209,  121,  194,
      121,  228,  195,  193,   94,   96,  228,  121,  203,  199,
      121,  207,  204,  208,  206,  200,   96,  228,  228,  211,
       94,   94,  228,  228,  121,  217,  209,  213,  210,  121,
      121,  214,   96,   96,  201,  121,  143,  121,  199,  204,
      208,  121,  212,  206,  200,  143,  211,  121,  228,  218,

      121,   94,  113,  228,  217,  213,  210,  219,  223,  116,
      214,  113,  201,   96,  220,  107,  104,   77,  228,  212,
      221,   94,   63,  228,   77,  225,  121,  228,  218,  216,
       94,   63,  228,   96,  219,  228,  116,  223,   94,  113,
      228,  220,   96,  113,  107,  104,  222,  221,  228,   84,
       96,   94,  225,  228,   79,   78,   77,  216,   63,  227,
      228,  228,  228,   96,  228,  228,  228,  228,  228,  228,
      226,  228,  228,  228,  228,  222,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  227,  228,
      228,  228,  228,  228,  228,  228,  226,   10,   10,   10,

       10,   10,   10,   10,   48,   48,   48,   48,   48,   48,
       48,   51,   51,   51,   51,   51,   51,   51,   58,   58,
       58,   58,   58,   58,   58,   62,   62,   62,   62,   62,
       62,   62,   76,   76,   76,   76,   76,   76,   76,   93,
       93,   93,   93,   93,  103,  103,  103,  103,  103,  103,
      103,  106,  106,  106,  106,  106,  106,  106,  108,  108,
      108,  108,  108,  108,  108,  112,  228,  228,  112,  112,
      112,  115,  115,  115,  115,  115,  115,  115,  120,  228,
      120,  120,  144,  144,  144,  144,  228,  144,  144,  113,
      228,  228,  113,  113,  113,    9,  228,  228,  228,  228,

      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228
    } ;

static const flex_int16_t yy_chk[874] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    3,    3,    3,
       11,    3,   83,    3,   11,   83,    3,    3,    3,    4,
        4,    4,  243,    4,   46,    4,    5,    5,    4,    4,

        4,    6,    6,   17,   17,    5,   30,   30,   32,   32,
        6,    7,    7,    7,    7,    7,    7,    7,   31,   31,
       31,    7,    7,   46,  241,  225,  224,    7,    8,    8,
        8,    8,    8,    8,    8,  183,   13,   13,    8,    8,
       13,  223,  221,  214,    8,   13,   33,   37,  105,   33,
       37,   33,   37,   43,   48,   48,   74,   43,   27,   50,
       50,   33,   37,   48,  183,    7,   52,   27,   50,   27,
       52,   55,   55,   57,   55,  105,  213,   57,   27,   27,
       74,   74,    8,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,

       16,   16,   16,   16,   16,   16,   16,   27,   27,   74,
       74,  212,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   34,   35,   64,   34,   35,   34,   35,
       71,   38,   36,   66,   38,   36,   38,   36,   34,   35,
       67,   58,   58,   64,   35,   58,   38,   36,   61,   61,
       58,   38,   61,   66,   68,   38,   69,   61,   70,  122,
       71,   79,  199,   34,   36,   81,   66,   67,   73,   67,
       79,   79,   64,   35,   81,   81,   69,   72,   69,   70,
       38,  207,   66,   70,   38,   69,   73,   68,   71,  122,

       34,  199,   36,   66,   72,   67,  204,   67,  102,   79,
       79,  203,  102,   81,   81,   69,  194,   69,   70,   82,
       72,  124,   70,   69,   68,   73,   93,  122,   82,   93,
       82,   93,  125,   72,  114,  108,  108,  123,  114,   82,
       82,   93,  126,   97,  108,  131,   97,   72,   97,   98,
       99,  124,   98,   99,   98,   99,  100,  123,   97,  100,
      127,  100,  126,  128,   98,   99,  125,  101,   82,   82,
      101,  100,  101,   99,  110,  110,  130,  134,  132,  124,
      131,   97,  101,  110,  128,  137,  123,   98,  100,  219,
      127,  126,  133,  125,  141,  130,  132,  135,  101,  136,

      134,  138,   99,  141,  141,  191,  137,  131,   97,  150,
      178,  133,  132,  128,   98,  154,  100,  140,  127,  133,
      140,  188,  135,  158,  130,  132,  101,  157,  219,  134,
      184,  181,  141,  141,  136,  137,  138,  150,  178,  132,
      133,  145,  152,  145,  145,  146,  145,  133,  146,  154,
      146,  135,  158,  147,  219,  157,  145,  147,  155,  147,
      146,  136,  147,  138,  147,  146,  148,  149,  159,  148,
      149,  148,  149,  161,  147,  152,  154,  162,  163,  155,
      158,  148,  149,  157,  156,  166,  165,  147,  156,  148,
      164,  167,  168,  156,  146,  159,  179,  169,  172,  185,

      172,  172,  152,  172,  173,  171,  161,  165,  155,  170,
      160,  163,  162,  172,  166,  164,  147,  174,  148,  153,
      174,  168,  174,  159,  169,  175,  167,  186,  180,  175,
      187,  179,  174,  161,  185,  190,  165,  182,  163,  162,
      176,  182,  166,  176,  164,  176,  182,  187,  189,  168,
      193,  177,  169,  167,  177,  176,  177,  192,  179,  175,
      195,  185,  180,  186,  205,  176,  177,  196,  200,  190,
      196,  200,  196,  200,  209,  206,  187,  193,  189,  208,
      210,  195,  196,  200,  177,  211,  143,  218,  175,  180,
      186,  220,  192,  205,  176,  142,  190,  129,  201,  208,

      120,  201,  117,  201,  206,  193,  189,  209,  218,  115,
      195,  112,  177,  201,  210,  106,  103,   95,  216,  192,
      211,  216,   92,  216,   76,  220,   65,  222,  208,  201,
      222,   62,  222,  216,  209,  226,   54,  218,  226,   53,
      226,  210,  222,   51,   47,   45,  216,  211,  227,   28,
      226,  227,  220,  227,   25,   21,   18,  201,   14,  226,
        9,    0,    0,  227,    0,    0,    0,    0,    0,    0,
      222,    0,    0,    0,    0,  216,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  226,    0,
        0,    0,    0,    0,    0,    0,  222,  229,  229,  229,

      229,  229,  229,  229,  230,  230,  230,  230,  230,  230,
      230,  231,  231,  231,  231,  231,  231,  231,  232,  232,
      232,  232,  232,  232,  232,  233,  233,  233,  233,  233,
      233,  233,  234,  234,  234,  234,  234,  234,  234,  235,
      235,  235,  235,  235,  236,  236,  236,  236,  236,  236,
      236,  237,  237,  237,  237,  237,  237,  237,  238,  238,
      238,  238,  238,  238,  238,  239,    0,    0,  239,  239,
      239,  240,  240,  240,  240,  240,  240,  240,  242,    0,
      242,  242,  244,  244,  244,  244,    0,  244,  244,  245,
        0,    0,  245,  245,  245,  228,  228,  228,  228,  228,

      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lex.ll"
/*
 * Parse.l - basic lexical analyzer
 *
 *	Vax/Basic to C++ lexical analyzer
 *
 * Description:
 *
 *	This procedure is used to break Vax/Basic source code
 *	into individual tokens, when are passed on to 'parse.y'.
 *
 */



#line 17 "lex.ll"
#include <stdio.h>
#include <string>
#include <assert.h>
#include <ctype.h>
#include "vartype.h"
#include "basic.h"
#include "variable.h"
#include "varlist.h"
#include "nodes.h"
#include "parse.hh"

int xline = 1;
int include_stack_pointer = 0;
Node* CommentList;

static const int MAX_INCLUDE_DEPTH = 10;
YY_BUFFER_STATE include_stack[MAX_INCLUDE_DEPTH];
static int include_line[MAX_INCLUDE_DEPTH];
char* include_name[MAX_INCLUDE_DEPTH] = {(char*)NULL};
static void StartInclude(char* filename);
static char *mangle_string(char *Text, int *type);
static void my_fatal_error(const char* msg);

#ifndef max
#define max(a,b) (((a) > (b)) ? (a) : (b))
#define min(a,b) (((a) > (b)) ? (a) : (b))
#endif

#define YY_FATAL_ERROR(msg) my_fatal_error(msg)

static inline int SetReturn(int x)
{
	yylval = new Node(x, yytext, include_stack_pointer, xline);
	return(x);
}

static inline int SetStringReturn(int x)
{
	int type;
//std::std::cerr << "Test1: Mangle '" << yytext << "'" << std::endl;
	char* MangleValue = mangle_string(yytext, &type);
	yylval = new Node(x, MangleValue, include_stack_pointer, xline);
	delete[] MangleValue;
	return(type);
}

static inline int SetNullReturn(int x)
{
	yylval = new Node(x, "", include_stack_pointer, xline);
	return(x);
}

static inline void SetComment(int x)
{
	yylval = new Node(x, yytext, include_stack_pointer, xline);

	if (CommentList == NULL)
	{
		CommentList = yylval;
	}
	else
	{
		CommentList->DownLink(yylval);
	}
}

static inline void CountLine()
{
	xline++;
}

#line 801 "/home/kevin/btran/src2/lex.cc"
#line 802 "/home/kevin/btran/src2/lex.cc"

#define INITIAL 0
#define incl 1
#define xremark 2
#define indata 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 91 "lex.ll"

#line 93 "lex.ll"
	/*
	 * White-space characters
	 */
#line 1028 "/home/kevin/btran/src2/lex.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 229 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 796 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 96 "lex.ll"
{ BEGIN(INITIAL); CountLine(); return('\n'); }
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 97 "lex.ll"
CountLine();
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 98 "lex.ll"
;
	YY_BREAK
/*
	 * Qutted Strings
	 */
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 102 "lex.ll"
return SetStringReturn(BAS_V_TEXTSTRING);
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 103 "lex.ll"
return SetStringReturn(BAS_V_TEXTSTRING);
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 105 "lex.ll"
{ SetComment(BAS_S_REMARK); }
	YY_BREAK
case 7:
/* rule 7 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 2);
(yy_c_buf_p) = yy_cp -= 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 106 "lex.ll"
{ SetComment(BAS_S_REMARK); }
	YY_BREAK
case 8:
/* rule 8 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 107 "lex.ll"
{ SetComment(BAS_S_REMARK); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 108 "lex.ll"
{ BEGIN(xremark); }
	YY_BREAK
case 10:
/* rule 10 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 2);
(yy_c_buf_p) = yy_cp -= 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 110 "lex.ll"
{ SetComment(BAS_S_REMARK); BEGIN(INITIAL); }
	YY_BREAK
case 11:
/* rule 11 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 111 "lex.ll"
{ SetComment(BAS_S_REMARK); BEGIN(INITIAL); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 113 "lex.ll"
return SetNullReturn(BAS_X_STRREF);
	YY_BREAK
/*
	 * Single character operations
	 */
case 13:
#line 119 "lex.ll"
case 14:
#line 120 "lex.ll"
case 15:
#line 121 "lex.ll"
case 16:
#line 122 "lex.ll"
case 17:
#line 123 "lex.ll"
case 18:
#line 124 "lex.ll"
case 19:
#line 125 "lex.ll"
case 20:
#line 126 "lex.ll"
case 21:
#line 127 "lex.ll"
case 22:
#line 128 "lex.ll"
case 23:
#line 129 "lex.ll"
case 24:
#line 130 "lex.ll"
case 25:
#line 131 "lex.ll"
case 26:
#line 132 "lex.ll"
case 27:
YY_RULE_SETUP
#line 132 "lex.ll"
return SetReturn(yytext[0]);
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 134 "lex.ll"
return SetReturn(BAS_X_EQ);
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 136 "lex.ll"
return SetReturn('(');
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 137 "lex.ll"
return SetReturn(')');
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 139 "lex.ll"
return SetNullReturn('^');
	YY_BREAK
case 32:
#line 141 "lex.ll"
case 33:
YY_RULE_SETUP
#line 141 "lex.ll"
return SetNullReturn(BAS_X_NEQ);
	YY_BREAK
case 34:
#line 143 "lex.ll"
case 35:
YY_RULE_SETUP
#line 143 "lex.ll"
return SetNullReturn(BAS_X_GE);
	YY_BREAK
case 36:
#line 145 "lex.ll"
case 37:
YY_RULE_SETUP
#line 145 "lex.ll"
return SetNullReturn(BAS_X_LE);
	YY_BREAK
/*
	 * Statements (usually)
	 */
case 38:
YY_RULE_SETUP
#line 150 "lex.ll"
return SetNullReturn(BAS_N_ENDIF);
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 151 "lex.ll"
return SetNullReturn(BAS_P_ENDIF);
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 152 "lex.ll"
{ NeedTimeH = 1; NeedBasicFun = 1; return SetNullReturn(BAS_S_RANDOM); }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 153 "lex.ll"
{ NeedTimeH = 1; NeedBasicFun = 1; return SetNullReturn(BAS_S_RANDOM); }
	YY_BREAK
/*
	 * functions with multiple determinates
	 */
case 42:
YY_RULE_SETUP
#line 158 "lex.ll"
return SetReturn(BAS_V_NAME);
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 159 "lex.ll"
return SetReturn(BAS_V_NAME);
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 160 "lex.ll"
return SetReturn(BAS_V_NAME);
	YY_BREAK
/*
	 * Percent Sign Commands
	 */
case 45:
YY_RULE_SETUP
#line 165 "lex.ll"
{ BEGIN(incl); return SetReturn(BAS_P_INCLUDE); }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 166 "lex.ll"
return SetReturn(BAS_P_FROM);
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 167 "lex.ll"
return SetReturn(BAS_P_CDD);
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 168 "lex.ll"
;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 169 "lex.ll"
return SetReturn(BAS_P_TITLE);
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 170 "lex.ll"
return SetReturn(BAS_P_SBTTL);
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 171 "lex.ll"
return SetReturn(BAS_P_IDENT);
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 172 "lex.ll"
return SetReturn(BAS_P_LIBRARY);
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 173 "lex.ll"
return SetReturn(BAS_P_ABORT);
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 174 "lex.ll"
return SetReturn(BAS_P_PRINT);
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 175 "lex.ll"
return SetReturn(BAS_P_LET);
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 176 "lex.ll"
return SetReturn(BAS_P_IF);
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 177 "lex.ll"
return SetReturn(BAS_P_THEN);
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 178 "lex.ll"
return SetReturn(BAS_P_ELSE);
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 179 "lex.ll"
return SetReturn(BAS_P_END);
	YY_BREAK
/*
	 * Note: this assumes that the word DATA alwats starts a DATA
	 * Statement.
	 */
case 60:
YY_RULE_SETUP
#line 185 "lex.ll"
{BEGIN(indata); return SetReturn(BAS_S_DATA); }
	YY_BREAK
case 61:
#line 188 "lex.ll"
case 62:
#line 189 "lex.ll"
case 63:
#line 190 "lex.ll"
case 64:
YY_RULE_SETUP
#line 190 "lex.ll"
SetComment(BAS_S_REMARK);
	YY_BREAK
/*
	 * These lines are used to trap an include file name
	 */
case 65:
YY_RULE_SETUP
#line 195 "lex.ll"
;
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 196 "lex.ll"
{ BEGIN(INITIAL); CountLine(); return('\n'); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 197 "lex.ll"
{ BEGIN(INITIAL); return SetReturn(BAS_P_FROM); }
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 198 "lex.ll"
{ char* MangleValue = mangle_string(yytext, 0);
				yylval = new Node(BAS_V_TEXTSTRING,
				MangleValue, include_stack_pointer);
				StartInclude(yytext); BEGIN(INITIAL);
				delete[] MangleValue;
				return BAS_V_TEXTSTRING; }
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 204 "lex.ll"
{ char* MangleValue = mangle_string(yytext, 0);
				yylval = new Node(BAS_V_TEXTSTRING,
				MangleValue, include_stack_pointer);
				StartInclude(yytext); BEGIN(INITIAL);
				delete[] MangleValue;
				return BAS_V_TEXTSTRING; }
	YY_BREAK
/*
	 * Numbers, variables, etc.
	 */
case 70:
/* rule 70 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 214 "lex.ll"
return SetReturn(BAS_V_LABEL);
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 215 "lex.ll"
return SetReturn(BAS_V_FLOAT);
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 216 "lex.ll"
return SetReturn(BAS_V_FLOAT);
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 217 "lex.ll"
return SetReturn(BAS_V_INTEGER);
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 218 "lex.ll"
return SetReturn(BAS_V_INT);
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 219 "lex.ll"
{ std::string test = yytext; LowerCase(test);
				  int nt = node_type[test];
				  if (nt != 0) return SetReturn(nt);
				  else return SetReturn(BAS_V_NAME); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 223 "lex.ll"
{ return SetReturn(BAS_P_NAME); }
	YY_BREAK
/*
	 * Code to handle data statemenys
	 */
case 77:
YY_RULE_SETUP
#line 228 "lex.ll"
{return SetReturn(BAS_V_TEXTSTRING); }
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 229 "lex.ll"
{ return SetStringReturn(BAS_V_TEXTSTRING); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 230 "lex.ll"
{ }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 231 "lex.ll"
{ return SetReturn(yytext[0]); }
	YY_BREAK
/*
	 * End of file (try to back up one include level)
	 */
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(incl):
case YY_STATE_EOF(xremark):
case YY_STATE_EOF(indata):
#line 236 "lex.ll"
{ if (--include_stack_pointer < 0)
			{ include_stack_pointer = 0; yyterminate(); }
			else
			{ yy_switch_to_buffer(
			include_stack[include_stack_pointer]);
			xline = include_line[include_stack_pointer];
			if (PositionDump){ std::cerr << "Leaving Include " <<
			include_name[include_stack_pointer] << std::endl; }
			delete include_name[include_stack_pointer];
			}
		}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 248 "lex.ll"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 1524 "/home/kevin/btran/src2/lex.cc"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 229 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 229 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 228);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 248 "lex.ll"


static void StartInclude(char* FileName)
{
	char UseName[64];	// File name to actually use
	FILE* NewChannel;	// File Open Info

	//
	// Strip off quotes (We KNOW that we have them)
	//
	assert(FileName[0] != 0);
	assert(FileName[1] != 0);
	strcpy(UseName, FileName + 1);
	UseName[strlen(UseName) - 1] = '\0';

	//
	// Can we handle the include?
	//
	if (include_stack_pointer >= MAX_INCLUDE_DEPTH)
	{
		std::cerr << "Includes Nested Too Deep (" << UseName << ")" << std::endl;
		return;
	}

	//
	// Try to open up the file
	//
//std::cerr << "Try: " << UseName << std::endl;
	NewChannel = fopen(UseName, "r");
	if (NewChannel == 0)
	{
		//
		// Try to lose any logicals on front of file name,
		//  and convert it to lower case. Also strip off
		//  logicals and directories.
		//
		//	This assumes that file names are of the
		//	format 'host::disk:[directory]name.ext'
		//
		char* cindex = strchr(UseName, ':');
		if (cindex != 0)
		{
			char newname[512];
			int loop;
			while (*cindex)
			{
				switch(*cindex)
				{
				case ']':
				case ':':
					loop = 0;
					break;
				default:
					newname[loop++] = tolower(*cindex);
					break;
				}
				cindex++;
			}
			newname[loop++] = '\0';
//std::cerr << "Try: " << newname << std::endl;
			NewChannel = fopen(newname, "r");

			if (NewChannel == 0)
			{
				for (std::list<std::string>::iterator inclist = include.begin();
					inclist != include.end() && NewChannel == 0;
					inclist++)
				{
					char tryname[512];
					strcpy(tryname, (*inclist).c_str());
					strcat(tryname, "/");
					strcat(tryname, newname);

//std::cerr << "Try: " << tryname << std::endl;
					NewChannel = fopen(tryname, "r");
				}
			}
		}
	}

	if (NewChannel == 0)
	{
		std::cerr << "Unable to open (" << UseName << ")" << std::endl;
		return;
	}


	//
	// Switch over to new buffer
	//
	include_stack[include_stack_pointer] = YY_CURRENT_BUFFER;
	include_line[include_stack_pointer] = xline;
	include_name[include_stack_pointer] = new char[strlen(UseName)+1];
	strcpy(include_name[include_stack_pointer], UseName);
	xline = 1;
	include_stack_pointer++;

	yy_switch_to_buffer(yy_create_buffer(NewChannel, YY_BUF_SIZE));
	if (PositionDump) { std::cerr << "Including (" << UseName << ")" << std::endl;};
}

/*******************************************************************************

Local Function:

	mangle_string()

Title:

	Translates a quoted string from Basic format to C++ format.

Description:

	This function processes a quoted string, changing the
	format from the way Basic does it to the way C++ does
	it.

Bugs:


*******************************************************************************/

static char *mangle_string(char *Text, int *type)
{
	char *ThisPart;
	char qmark;
	int Base = 0;
	std::string ThisPtr;
	int returntype = 0;
	int decimalseen = 0;

	assert(Text != NULL);

	//
	// Handle any possible bases on front of string
	//
	switch (*Text)
	{
	case 'd':	// Decimal
	case 'D':
		Base = 10;
		Text++;
		break;
	case 'b':	// Binary
	case 'B':
		Base = 2;
		Text++;
		break;
	case 'o':	// Octal
	case 'O':
		Base = 8;
		Text++;
		break;
	case 'x':	// Hexidecimal
	case 'X':
		Base = 16;
		Text++;
		break;
	case 'a':	// ASCII
	case 'A':
		Base = 256;
		Text++;
		break;
	default:
		break;
	}

	//
	// Determine quote character used (Better start with a quote mark
	// or the lexer is broken.
	//
	qmark = *Text++;

	//
	// Process all the characters in original string
	//
	while (qmark)
	{
		switch (*Text)
		{
		//
		// Slash must be doubled
		//
		case '\\':
			ThisPtr += "\\\\";	// Two backslashes
			break;

		//
		// Change (audible bell) character to (\a)
		//
		case '\a':
			ThisPtr += "\\a";
			break;

		//
		// Change (backspace) character to (\b)
		//
		case '\b':
			ThisPtr += "\\b";
			break;

		//
		// Change (tab) character to (\t)
		//
		case '\t':
			ThisPtr += "\\t";
			break;

		//
		// Change (vertical tab) character to (\v)
		//
		case '\v':
			ThisPtr += "\\v";
			break;

		//
		// Single quote mark
		//
		case '\'':
			switch(qmark)
			{
			case '\'':		// End of qtoted string
				qmark = '\0';
				break;
			default:		// Single quote in string
				ThisPtr += '\'';
				break;
			}
			break;

		//
		// Double Quote Mark
		//
		case '"':
			switch(qmark)
			{
			case '"':		// End of quoted string
				qmark = '\0';
				break;
			default:		// Double quote inside string
				ThisPtr += "\\\"";
				break;
			}
			break;

		case '.':
		case 'e':
		case 'E':
			decimalseen = 1;
			ThisPtr += *Text;
			break;

		default:
			ThisPtr += *Text;
			break;
		}
		Text++;
	}

	//
	// Last character is erither a null terminator
	// or he result type wanted
	//
	if (*Text == '\0' && Base == 0)	// Simple text string
	{
		ThisPtr = std::string("\"") + ThisPtr + "\"";
		returntype = BAS_V_TEXTSTRING;
	}
	else		// Numeric value
	{
		returntype = BAS_V_INTEGER;
		switch(Base)
		{
		case 2:
			ThisPtr = std::string("0b") + ThisPtr;
			break;
		case 8:
			ThisPtr = std::string("0") + ThisPtr;
			break;
		case 16:
			ThisPtr = std::string("0x") + ThisPtr;
			break;
		case 256:
			ThisPtr = std::string("'") + ThisPtr + "'";
			break;
		default: // 10
			break;
		}
	}

	switch(*Text)
	{
	case 'B':	// Byte
	case 'b':
	case 'W':	// Word
	case 'w':
		returntype = BAS_V_INTEGER;
		break;

	case 'L':	// Long
	case 'l':
		returntype = BAS_V_INTEGER;
		ThisPtr += "L";
		break;

	case 'q':	// Quad
	case 'Q':
		returntype = BAS_V_INTEGER;
		ThisPtr += "LL";
		break;

	case 'C':	// character constant
	case 'c':
		returntype = BAS_V_INTEGER;
		break;

	case 'f':	// float
	case 'd':	// d-float
	case 'p':	// packed decimal
	case 'F':
	case 'D':
	case 'P':
		returntype = BAS_V_FLOAT;
		if (decimalseen == 0)
		{
			ThisPtr += ".0";
		}
		ThisPtr = "F" + ThisPtr;	// float instead of double
		break;

	case 'g':	// g-float
	case 'G':
	case 's':	// s-float
	case 'S':
		returntype = BAS_V_FLOAT;
		if (decimalseen == 0)
		{
			ThisPtr += ".0";
		}
//             ThisPtr += "";	// Double (the default)
		break;


	case 'h':	// h-float
	case 't':	// t-float
	case 'x':	// x-float
	case 'H':
	case 'T':
	case 'X':
		returntype = BAS_V_FLOAT;
		if (decimalseen == 0)
		{
			ThisPtr += ".0";
		}
		ThisPtr += "L";	// Long float. Is this standard?
		break;

	default:	// Probably a bug
		returntype = BAS_V_TEXTSTRING;
		break;

	}

	//
	// Return result (Yes, there is a memory leak here)
	//
	ThisPart = new char[ThisPtr.size() + 2];
	strcpy(ThisPart, ThisPtr.c_str());
	if (type != 0)
	{
		*type = returntype;
	}
	return (ThisPart);
}

//
// Fatal error handler, which reports the failed line.
//
//	This may break in future versions of flex. If so,
//	you can just remove all references to it and let flex use the
//	default error handler.
//
static void my_fatal_error(const char* msg)
{
	std::cerr << msg << " at line " << xline;
	if (include_stack_pointer > 0)
	{
		std::cerr << " in " << include_name[include_stack_pointer - 1];
	}
	std::cerr << std::endl;
	exit(YY_EXIT_FAILURE);
}

void flex_indata()
{
	BEGIN(indata);
}

